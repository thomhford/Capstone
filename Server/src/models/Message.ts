// models/Message.ts
import {DataTypes, Model, Sequelize, Transaction} from 'sequelize';
import { FileInstance } from "./File";
import { UserInstance } from "./User";

interface MessageAttributes {
    message_id?: number; // Optional because it's auto-generated by MySQL
    message: string;
    read?: boolean; // Not needed at message creation, will be set to false by default
    isReceived?: boolean; // Not needed at message creation, will be set to false by default
    type: string;
    conversationId: number;
    authorId: string;
    status?: 'sent' | 'queued' | 'delivered';
}

export interface MessageInstance extends Model<MessageAttributes>, MessageAttributes {
    // Instance methods for testing associations
    getAttachments: () => Promise<FileInstance[]>;
    getAuthor: () => Promise<UserInstance>;
    setAuthor: (user: UserInstance, p: { transaction: Transaction }) => void;
}

export const createMessageModel = (sequelize: Sequelize) => sequelize.define<MessageInstance>('Message', {
    message_id: {
        type: DataTypes.INTEGER,
        autoIncrement: true,
        primaryKey: true,
        allowNull: false
    },
    message: {
        type: DataTypes.TEXT,
        allowNull: false,
    },
    read: {
        type: DataTypes.BOOLEAN,
        allowNull: false,
        defaultValue: false,
    },
    isReceived: {
        type: DataTypes.BOOLEAN,
        allowNull: false,
        defaultValue: false,
    },
    type: {
        type: DataTypes.ENUM('text', 'file'),
        allowNull: false,
        defaultValue: 'text', // 'text', 'file'
    },
    conversationId: {
        type: DataTypes.INTEGER,
        allowNull: false,
    },
    authorId: {
        type: DataTypes.STRING,
        allowNull: false,
    },
    status: {
        type: DataTypes.ENUM('sent', 'queued', 'delivered'),
        allowNull: false,
        defaultValue: 'sent', // 'sent', 'queued', 'delivered'
    }
}, {
    timestamps: true,
    paranoid: true,
    indexes: [{ fields: ['conversationId'] }]
});
